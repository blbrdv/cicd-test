name: 'Test'

on:
  workflow_dispatch:
    inputs:
      target-ref:
        description: The branch, tag or SHA to checkout.
        type: string
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Setting target ref
        id: ref
        run: |
          if ( "true" -eq "${{ inputs.target-ref == '' }}" ) {
            $Ref = "main";
          } else {
            $Ref = "${{ inputs.target-ref }}"
          }
          echo "Ref is '$Ref'";
          echo "target-ref=$Ref" >> $env:GITHUB_OUTPUT;

      - uses: actions/checkout@v4
        with:
          repository: 'blbrdv/ezstore'
          ref: ${{ steps.ref.outputs.target-ref }}
          fetch-depth: 0

      - name: Restore cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~\go
            %LocalAppData%\go-build
            %LocalAppData%\golangci-lint
            %USERPROFILE%\magefile
          key: ${{ runner.os }}-${{ runner.arch }}-go-${{ hashFiles('.\go.mod', '.\.mage\go.mod', '.\.mage\golangci-lint\go.mod') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-go-

      - name: Check if need Go installation
        if: steps.cache.outputs.cache-hit != 'true'
        id: go
        shell: pwsh
        run: |
          $NeedInstall = 'true';
          
          try {
            (& go version) -match '^go version (go)?([.0-9]+)' > $null;
            $GoInstalledVersion = $Matches[2];
            echo "Go installed version: '$GoInstalledVersion'";
          
            $GoNeededVersion = & go list -f '{{.GoVersion}}' -m;
            echo "Go needed version:    '$GoNeededVersion'";
          
            if ( $GoNeededVersion -eq $GoInstalledVersion ) {
              $NeedInstall = 'false';
            }
          } finally {
            if ( $NeedInstall -eq 'true' ) {
              echo "Need to setup Go";
            } else {
              echo "No need for Go setup";
            }
            echo "need-install=$NeedInstall" >> $env:GITHUB_OUTPUT;
          }

      - name: Setup GO
        if: steps.cache.outputs.cache-hit != 'true' && steps.go.outputs.need-install == 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Download dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          cd .mage
          go mod download -x
          cd golangci-lint
          go mod download -x
          cd ..\..
          go mod download -x

      - name: Build project
        run: .\run.ps1 build

      - name: Save cache
        uses: actions/cache/save@v4
        with:
          path: |
            ~\go
            %LocalAppData%\go-build
            %LocalAppData%\golangci-lint
            %USERPROFILE%\magefile
          key: ${{ runner.os }}-${{ runner.arch }}-go-${{ hashFiles('.\go.mod', '.\.mage\go.mod', '.\.mage\golangci-lint\go.mod') }}

      - name: Upload app
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: output

  test:
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        include:
          - label: windows-2022
            name: Windows 10 2022 x64
            archs: amd64,386
            path: .\output
          - label: windows-2025
            name: Windows 10 2025 x64
            archs: amd64,386
            path: .\output
          - label: windows-11-arm
            name: Windows 11 ARM
            archs: arm64,arm,amd64,386
            path: .\output

    runs-on: ${{ matrix.label }}

    name: ${{ matrix.name }}

    steps:
      - uses: actions/checkout@v4

      - name: Download app
        uses: actions/download-artifact@v4
        with:
          name: build
          path: output

      - name: Running scenario
        run: .\tests\All.ps1 -Path "${{ matrix.path }}" -Archs "${{ matrix.archs }}"
